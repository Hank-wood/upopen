<% include ../../common/header.ejs %> <div class="main" id="blogBox"><section><div class="info clearfix"><span class="title">NODEJS项目实践0.1</span> <a class="type" href="/blog/list?kind=nodejs">nodejs</a> <img class="head" src="/public/imgs/head.png" width="42"></div><div class="tool"><!--span class="toolItem view">Views: 0</span>
			<span class="toolItem talk">Comments: 0</span--> <span class="toolItem date">Date: 2016-05-03</span></div><div class="content clearfix markdown"><h3 id="-">一、前言</h3><p>前端如何独立用nodeJs实现一个简单的注册、登录功能，是不是只用nodejs+sql就可以了？其实是可以实现，但离实际应用还有距离，那要怎么做才是实际可用的。</p><p>网上有很多nodeJs的示例，包括和 sql / nginx … 等周边技术结合demo，但通常都是做为入门演示或解决某一问题，少有站在项目实际完整应用角度，给出一个整体的解决方案。一些前端朋友和我讨论nodejs时，也多表现出对服务端的欠缺，虽然知道nodejs很好，但难以实际应用。</p><p>我在这块做了些研究，也在公司项目中有应用，在此和大家分享下，如何用nodejs实现一个实际可用的项目，需要操作的步骤及相关的技术应用。现在还没想好做怎样的一个demo，就随想随做，如有意义的需求我们也可以一起实现下，若有欠缺，也欢迎共同讨论。</p><p>第一次做，我们就先实现下最常用的注册和登录。</p><p>技术点：</p><ol><li>用户注册站点，需要输入用户名、密码、邮箱，验证有效性。[ nodejs / express / validate / md5 / node-dev / requirejs ]</li><li>发送验证邮件，用户通过邮箱验证后，注册成功。[ mongodb / mailer ]</li><li>用户登录，可以访问需要登录权限的页面[ redis / 权限控制 ]</li><li>本项目在linux上开发 及 发布部署 [ git / nginx / ubuntu / aliyun / pm2 ]</li><li>考虑到前后端分离的需要，我们也将分别搭建前台服务（接收页面请求）、后台服务（数据存储） [ 项目架构 ]</li></ol><p>⋅⋅*因涉及到的技术点较多，在本项目中每一种技术如nginx只对使用到的部分做讲解，其它部分后面用到再讲，循序渐进，基础较弱者也好逐步接受。</p><p>⋅⋅*本节，我们将实现unbuntu、nodejs、nginx的安装及初步使用，搭建一个可访问的服务</p><h2 id="-linux-">二、linux环境</h2><p>本次开发将linux上开发，建议前端开发者尝试使用linux系统，其能拓展技术面，在提升开发、发布效率等方面也有好处，初次使用linux会有些障碍，不过现在linux也有类win7的漂亮桌面环境，操作大致相似，在命令不熟时也可以正常使用，坚持用两周，是可以适应的。</p><p>选择系统上建议安装适合个人开发者的ubuntu。</p><p>建议安装双系统，虚拟机太弱，完全安装ubuntu，使用又不便，有些软件如PS是不支持linux的。</p><p>win7下安装ubuntu 的双系统，WIN7安装ubutntu 步骤参见 <a href="http://www.upopen.cn/article/info?id=559291b3f0e6e0665b000001">http://www.upopen.cn/article/info?id=559291b3f0e6e0665b000001</a></p><p>安装成功后，我们就开始提高B格之旅，接下来会对用到的linux操作做简单解释，具体的ubuntu教程可以参考 <a href="http://www.upopen.cn/article/info?id=55938b7ff0e6e0665b000003">http://www.upopen.cn/article/info?id=55938b7ff0e6e0665b000003</a></p><h3 id="-nodejs">三、安装nodeJs</h3><p>快捷键 Ctrl + Alt + T 打开shell终端，</p><p>1、打开Nodejs站点 <a href="https://nodejs.org/download/，下载linux下对应的.gz文件。也可以拷贝下载地址后，">https://nodejs.org/download/，下载linux下对应的.gz文件。也可以拷贝下载地址后，</a></p><p>在shell里执行 wget <a href="https://nodejs.org/dist/v0.12.5/node-v0.12.5-linux-x64.tar.gz。">https://nodejs.org/dist/v0.12.5/node-v0.12.5-linux-x64.tar.gz。</a></p><p>解释：wget ：下载后面路径指定的文件</p><p>2、下载后默认在Downloads文件里，我们将压缩文件放Soft/node 目录里以便分类管理</p><p>shell执行 mkdir Soft // mkdir: 创建Soft文件夹</p><p>执行 cd Downloads //cd: 进入到 Downloads 下载文件目录</p><p>执行 cp node-v0.12.5-linux-x64.tar.gz /home/cc/Soft //cp: 复制 node..gz到Soft目录下，注意cc是你的主机名，可通过pwd查看</p><p>执行cd //进入个人根目录</p><p>执行cd Soft/node</p><p>执行 tar -zxvf node-v0.12.5-linux-x64.tar.gz //tar -zxvf 解压</p><p>执行 mv node-v0.12.5-linux-x64.tar.gz node //mv : 修改文件夹名为node</p><p>执行sudo vi /etc/profile //打开环境变量配置文件</p><p>在最后写入</p><pre><code class="lang-js">export PATH=&quot;/home/cc/Soft/node/bin:$PATH&quot;
export NODE_PATH=&quot;/home/cc/Soft/node/lib/node_modules&quot;
</code></pre><p>// 环境变量地址参见 node的 pwd</p><p>配置成功后重启</p><p>作用：重启后，可执行node -v查看是否安装成功。</p><p>解释：本部涉及到ubuntu的基本命令操作，都有简单的解释</p><h3 id="-express-">四、创建项目目录并安装express等框架包</h3><p>目录结构</p><p>root：项目根目录 ⋅⋅<em>web：前端服务 ⋅⋅</em>static：静态服务 ⋅⋅*server：后端服务</p><p>1、执行 mkdir -p root/web</p><p>作用：创建目录，所有项目都在root下，前端服务在web。创建成功后进入web文件夹 执行cd root/web</p><p>2、执行touch package.json</p><p>作用：创建 package.json文件，维护nodejs项目的依赖文件</p><p>解释：touch ：创建文件</p><p>4、执行 vi package.json</p><p>作用：用系统的VI编辑器打开 package.json文件。用vi作大量的编辑工作是不适合的，我们还是用常规的编辑器，在桌面打开文件系统，进入我们创建的root/web目录，使用系统默认的gedit编辑器打开package.json</p><p>5、通过gedit在package.json写入</p><pre><code class="lang-javascript">{
⋅⋅&quot;name&quot;: &quot;myCoolNodejs &quot;,
⋅⋅&quot;version&quot;: &quot;0.0.1&quot;,
⋅⋅&quot;private&quot;: true,
⋅⋅&quot;scripts&quot;: {
⋅⋅⋅&quot;start&quot;: &quot;node app.js&quot;
⋅⋅},
⋅⋅&quot;dependencies&quot;: { //主要是这两处，设置引入模块，后面还会用到其它模块，另行添加
⋅⋅⋅&quot;express&quot;: &quot;*&quot;,
⋅⋅⋅&quot;ejs&quot;: &quot;*&quot;
⋅⋅}
}
</code></pre><p>6、执行npm install</p><p>作用：下载package.json中dependencies 定义的引入模块</p><p>注意：有时限制于网络等因素npm install会安装不成功，可以使用淘宝的npm镜像，执行 npm install -g cnpm --registry=<a href="https://registry.npm.taobao.org，安装cnpm，执行cnpm">https://registry.npm.taobao.org，安装cnpm，执行cnpm</a> install 。使用同npm。</p><p>7、通过桌面打开 web文件夹，创建app.js，并写入基本配置</p><pre><code class="lang-js">        /**
        * 引入依赖模块
        */
        var express    = require( &#39;express&#39; ),
        http              = require( &#39;http&#39; ),
        path             = require( &#39;path&#39; );

        var app        = express(),
        server     = http.Server( app );

        /**
        * 设置
        */
        app.set( &#39;port&#39;, process.env.PORT || 3000 ); //服务启动端口
        app.set( &#39;views&#39;, __dirname + &#39;/views&#39; ); //视图文件
        app.set( &#39;view engine&#39;, &#39;ejs&#39; ); //页面引擎
        app.use( &#39;/&#39;, express.static( path.join( __dirname, &#39;assets&#39; ))); //静态文件路径

        app.get( &#39;/&#39;, function( req, res ){
                res.render( &#39;index.ejs&#39; ); //请求跳转到 index.ejs文件
        })
        server.listen( app.get( &#39;port&#39; ), function(){ //监听服务端口
                console.log( &#39;root server listening on port &#39; + app.get( &#39;port&#39; ));
        } );

        server.on( &#39;close&#39;, function(){
                console.log( &#39;close&#39; );    
        } );
</code></pre><p>8、web目录下创建views文件夹，里面再创建index.ejs文件作为首页</p><p>9、打开index.ejs文件，并写入</p><pre><code class="lang-js">        &lt;!DOCTYPE html&gt;
        &lt;html&gt;
        &lt;head&gt;
        &lt;title&gt;我的nodejs项目&lt;/title&gt;
        &lt;/head&gt;
        &lt;body&gt;
            &lt;h1&gt;我的nodejs项目&lt;/h1&gt;
            &lt;img src=&quot;/public/imgs/logo.png&quot; /&gt; &lt;!-- 引用图片，是为测试后面配置静态服务器--&gt;
        &lt;/body&gt;
        &lt;/html&gt;
</code></pre><p>作用：ejs语法同html，优势在于其可以引用一些命令，如接收服务服务端定义的数据、include模板等</p><pre><code>    10、在web目录下创建文件夹 assets/public/imgs，拷入logo.png 图片

    11、shell到web目录，执行 node app.js，在浏览器打开 127.0.0.1:3000，即可看到我们在index.ejs里设置的内容，如图

    12、在root在创建 statc文件夹，作为静态服务资源，将目录web/assets/下的文件，复制到static里，下面nginx将设置静态文件代理到static服务器
</code></pre><h3 id="-nginx">五、安装nginx</h3><p>1、shell执行sudo apt-get install nginx</p><p>作用：安装nginx服务器，nginx的使用可参见<a href="http://www.upopen.cn/article/info?id=559254e8b269230039000003">http://www.upopen.cn/article/info?id=559254e8b269230039000003</a></p><p>2、执行sudo vi /etc/nginx/sites-enabled/default</p><p>作用：因配置文件需要编辑的命令较少，我们尝试通过vi 编辑 nginx的配置文件。vi命令操作参见<a href="http://www.upopen.cn/article/list?kind=ubuntu">http://www.upopen.cn/article/list?kind=ubuntu</a></p><pre><code>    在server里增加
</code></pre><pre><code class="lang-js">        location  ~ \.(png|jpg|css|js|woff|ttf|less|gif)$ {
            root /home/jgc/root/static/;
            #配置以上面结尾的文件都指向到 /home/cc/root/static。注意/cc/修改为你的计算机名
        }
        location / {
            proxy_pass http://mynodejs.com;
            #其它请求转向到 http://mynodejs.com; 该名称可以自定义
        }
</code></pre><pre><code>    在server外面新增
</code></pre><pre><code class="lang-js">        upstream mynodejs.com { //此处名称与上面proxy_pass名称一致
            server 127.0.0.1:3000;
        #创建集群，为分摊服务器压力，可以创建多个服务器，做负载均衡，如果我们将web复制一份为web1，启动端口改为3001，将其启动后，此处可以再增加一条配置
            server 127.0.0.1: 3001
            # 这样访问便可随机指向3000 及 3001服务，分摊访问压力、降低服务宕机风险
        }
</code></pre><pre><code>    3、在shell 执行 sudo /etc/init.d/nginx start

        作用：启动nginx服务

    4、此时访问127.0.0.1也打开了和 3000一样的页面，不同在于其静态资源是从static文件夹获取的，可以通过删除web中的assets文件测试。我们后续静态文件都在statc里编辑，发布时static和web放在不同的服务器上，即实现了资源分离，为CDN做准备，

    5、执行sudo vi /etc/hosts

        作用：打开本地host映射文件，新增一条 127.0.0.1 www.mynodejs.com。保存后，浏览器访问 www.mynodejs.com。


    本节我们使用、开发了如下功能

        1、ubuntu的安装和使用

        2、nodejs的安装 及 模块安装

        3、nodejs文件的简单配置和启动，项目目录的划分

        4、nginx安装、简单配置 及 启动 [ 反向代理及集群 ]


    如果你原本只是一个单纯写html/css/js的前端开发员，相信这节是可以学到相当多的新知识，下节，我们将主要在nodejs及 mongo这一块，并按实际项目使用创建项目架构。

    有不明或错误，欢迎加群讨论，谢谢。
</code></pre></div></section><div class="comments" name="comments" id="comments"><div class="commentWrap" id="commentWrap"></div><form class="commentForm" id="commentForm"><input type="text" placeholder="you name" id="commentUser" maxlength="30" class="commentUser"><br><textarea class="commentContent" id="commentContent" rows="6" maxlength="1000" placeholder="your comment for this blog within 1000 words"></textarea><br><button type="submit" id="commentBtn" class="btn">SAVE COMMENT</button><br><br></form></div></div> <% include ../../common/slide.ejs %> <% include ../../common/footer.ejs %>