<% include ../../common/header.ejs %> <div class="main" id="blogBox"><section><div class="info clearfix"><span class="title">nginx</span> <a class="type" href="/blog/list?kind=server">server</a> <img class="head" src="/public/imgs/head.png" width="42"></div><div class="tool"><!--span class="toolItem view">Views: 0</span>
			<span class="toolItem talk">Comments: 0</span--> <span class="toolItem date">Date: 2016-05-04</span></div><div class="content clearfix markdown"><h3 id="-">一、介绍</h3><p>nginx是目前最优秀的静态服务器，其有易配置、高性能等优点。</p><p>相比于apache的同步，nginx采用了I/O模式，nodejs也是采用了一这特性，单台服务器可以支持更多的并发。其解决了c10k的问题。</p><p>一个形象的说法是“apache实现了1000个功能，nginx只实现了其中最常用的10个功能，而其实现这10个功能的性能是apache同功能的100倍”。</p><h3 id="-">二、安装</h3><h4 id="1-mac">1、mac</h4><p>使用mac自带的包管理工具brew</p><pre><code>/*更新brew*/
brew update 

/*安装*/
brew install nginx

/*可以使用下面的命令来查看版本，检验是否安装成功*/
nginx -v
//nginx version: nginx/1.8.1
</code></pre><h3 id="-">三、配置</h3><p>nginx本身还是有的较深的知识，需要大量的积累和实践，相对于专业的运维，作为一个开发者，基本上掌握ngonx.conf的配置，会启动、停止就可以了。满足本地开发时的服务配置，与运维做清晰沟通。</p><p>在mac上其默认的配置文件在 <strong>/usr/local/etc/nginx/nginx.conf</strong> 里，不同的系统conf的存放位置也不同。</p><p>下面上nginx.conf的文件内容，/*这里是我的注释*/</p><pre><code>/*首先nignx的注释使用符号# */
#user  nobody;
/*运行服务的用户，其默认是被注释的，无需修改*/
worker_processes  1;
/*服务开启的进程数，值为数字，可配置与CPU内核数一致，若不确定，可以设置为auto*/

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
/*日志文件配置*/
#pid        logs/nginx.pid;
/*pid文件是nginx的主进程号，nginx运行时可通过 pgrep nginx -l 查看，无需修改*/

events {
    worker_connections  1024;
  /*单个进程允许的最大连接数，总连接数为 work_processes * worker_connections，其可以设置不会超越服务器所支持的上限*/
}


http {
/*对http请求的配置，同比https*/
    include       mime.types;
 /* include 用户添加另外一文件，可以将某些相对独立且繁琐的配置独立成一文件，使用include来加载，可以到同目录下打开看下mime.types的文件内容，其罗列的文件扩展名的映射。*/
    default_type  application/octet-stream;
/*设置默认的mime-type*/
    #log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;
    #                  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;
    #                  &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;
    /*设置客户端keep-alive链接的超时时间，设置低值，nginx的工作时间超长*/
    #gzip  on;
    /*设置 传输内容的gzip压缩，我下载的该版本本身没有显示很多，但该项的配置内容较多，通常有以下配置项
    gzip on;     #nignx采用gzip压缩发送，以减少传输数据量
    gzip_disable &quot;msie6&quot;;     #对不支持的浏览器设置禁用，通常为IE6
    gzip_static on;          #压缩前先判断是否有压缩后，有则不再压缩
    gzip_proxied any;     #允许或禁止压缩流，any表示压缩所有
    gzip_min_length 1;     #     启用最小压缩，低于则不压缩。作用提高效率
    gzip_types text/plain text/css ..  #设置需要压缩的数据格式
    gzip_comp_level 4;     #设置压缩等级 1-9，数字越大，压缩越大时间越慢，折中4合适
    gzip_buffers     4 4k/8k     #用于指定存放被压缩响应的缓冲的数量和大小。
    gzip_http_version 1.1;
    */
    server {
        /*server是我们最常用使用的配置，每个服务对应一个server配置*/
        listen       8080;
        /*监听端口，win/linux默认是80端口，80是http的默认端口，443是https的默认端口，不过mac的80端口默认会被占用*/
        server_name  localhost;
        /*监听的域名，以这个默认配置，启动用http://localhost:8080 访问
        当服务支持多个域名访问时，可以通过设置多个server_name，代理不同的域名
        如在本地 hosts里添加域名  
        127.0.0.1 www.upopen.com
        修改 server_name www.upopen.com
        此时访问 www.upopen.com:8080即可访问此处设置的请求
        设置多个server，可以相同的listen port，以不同的server_name来区别访问
    */
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }
/* location 用于匹配请求path，可使用正则，通常可以设置为后缀名匹配，路径匹配
     root 设置目录，html是nginx安装时默认的目录，实现项目中修改到项目目录
    index 设置访问首页 index.html / htm 也是nginx安装时的默认页
*/

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache&#39;s document root
        # concurs with nginx&#39;s one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }
}
</code></pre><h3 id="-">四、使用</h3><pre><code>/*查看帮助*/
nginx -h
======
Usage: nginx [-?hvVtq] [-s signal] [-c filename] [-p prefix] [-g directives]

Options:
  -?,-h         : this help
  -v            : show version and exit
  -V            : show version and configure options then exit
  -t            : test configuration and exit
  -q            : suppress non-error messages during configuration testing
  -s signal     : send signal to a master process: stop, quit, reopen, reload
  -p prefix     : set prefix path (default: /usr/local/Cellar/nginx/1.8.1/)
  -c filename   : set configuration file (default: /usr/local/etc/nginx/nginx.conf)
  -g directives : set global directives out of configuration file
======
看上面的打印信息，可以看出其命令是非常简单的，如  
/*启动*/
nginx
/*停止*/
nginx -s stop
/*检查配置文件格式，在修改nginx.conf文件名，验证格式是否有误*/
nginx -t
/*重载，修改配置后需要重载生效*/
nginx -s reload
</code></pre></div></section><div class="comments" name="comments" id="comments"><div class="commentWrap" id="commentWrap"></div><form class="commentForm" id="commentForm"><input type="text" placeholder="you name" id="commentUser" maxlength="30" class="commentUser"><br><textarea class="commentContent" id="commentContent" rows="6" maxlength="1000" placeholder="your comment for this blog within 1000 words"></textarea><br><button type="submit" id="commentBtn" class="btn">SAVE COMMENT</button><br><br></form></div></div> <% include ../../common/slide.ejs %> <% include ../../common/footer.ejs %>