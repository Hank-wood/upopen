<% include ../../common/header.ejs %> <div class="main" id="blogBox"><section><div class="info clearfix"><span class="title">JS模块化编程总结_待续</span> <a class="type" href="/blog/list?kind=other">other</a> <img class="head" src="/public/imgs/head.png" width="42"></div><div class="tool"><!--span class="toolItem view">Views: 2</span>
			<span class="toolItem talk">Comments: 0</span--> <span class="toolItem date">Date: 2016-05-03</span></div><div class="content clearfix markdown"><h3 id="-">一、背景：</h3><p>随着的互联网技术的不断发展，浏览器逐渐成了集大成的CS客户端，页面功能在向系统级、软件级靠拢的趋势下，开发团队也需要一些软件工程的方法来开发WEB项目，如测试驱动、面向对象，而模块化编程更是成为一种急需应用的技术。</p><h3 id="-">二、原因：</h3><p>为方便文件管理、增加复用，我们需要细化JS文件，每个文件负责单一职能，称之为模块，明确每个文件的职能，当交互功能较复杂时，引用的文件也越加庞大，此时我们就需要模块化管理。</p><p>如我们编写一个模块组件Dialog.js，其依赖event.js / bootstrap.js / component.js，而event.js又依赖 base.js / core.js / el.js，bootstrap.js依赖 boot.js / under.js / almond.js，同理可能依赖更多的js，传统方法我们用到Dialog.js时实际上需要引用9个js，如下</p><pre><code class="lang-html">    &lt;html&gt;
    &lt;body&gt;
    ...
     &lt;script src=&quot;/public/base.js&quot;&gt;&lt;/script&gt;
     &lt;script src=&quot;/public/core.js&quot;&gt;&lt;/script&gt;
     &lt;script src=&quot;/public/el.js&quot;&gt;&lt;/script&gt;
     &lt;script src=&quot;/public/boot.js&quot;&gt;&lt;/script&gt;
     &lt;script src=&quot;/public/under.js&quot;&gt;&lt;/script&gt;
     &lt;script src=&quot;/public/almond.js&quot;&gt;&lt;/script&gt;
     &lt;script src=&quot;/module/event.js&quot;&gt;&lt;/script&gt;
     &lt;script src=&quot;/module/bootstrap.js&quot;&gt;&lt;/script&gt;
     &lt;script src=&quot;/module/component.js&quot;&gt;&lt;/script&gt;
     &lt;script src=&quot;/widget/dialog.js&quot;&gt;&lt;/script&gt;
    &lt;/body&gt;
    &lt;/html&gt;
</code></pre><p>我们将其细分，Dialog所依赖的每个js都负责了某一独立功能，分开便于其它组件复用，也利于学习理解。</p><p>但将这9个js都到html里显示引用，工作量却非常可观，且不能弄错路径及加载顺序，若后续Dialog.js又需要多引用一个js，所有的项目都要手动增加，且这样依次同步加载下来会导致会占用浏览器线程，可能导致假死。</p><h3 id="-">三、作用：</h3><p>模块化的作用就是解决上面提到的两点问题。</p><p>1、实现js文件的异步加载，避免浏览器假死。</p><p>2、管理模块之间的依赖，便于模块的维护</p><h3 id="-">四、实现：</h3><p>模块化，就是把一个相对独立的功能，单独成一个文件，可输入指定依赖、输出指定的函数，供外界调用，其它都是内部的。这样即可方便不同的项目重复使用，也不会对其造成额外的影响。而既然要给不同的项目应用，特别像git上的模块是面向全球范围的，必然要形成可遵循的规范，开发者和使用者都有据可寻。</p><p>目前通用javascript规范分为服务端（CommonJS），客户端（AMD / CMD）。</p><p>CommonJS是针对javascript的服务端，一切模块都是通过require来同步加载调用， Nodejs采用的就是这个规范。</p><pre><code class="lang-js">    var module1 = require( &#39;module1&#39;),
          module2 = require( &#39;module2&#39; );

    function module3(){
         ...
     }
    exports.module3 = module3;
</code></pre><p>注：通过require加载module1、2，操作后通过exports导致module3。</p><p>这里我们主要讲客户端模块</p><p>客户端与服务端的不同在于异步加载，之所以异步是因为CommonJS规则应用在服务端时，文件都是本地硬盘读取，不受限于网络，等待硬盘读取时间很短。而浏览器要考虑网速，若长时间等待会导致浏览器假死。</p><p>引用形式如下图</p><p><img src="http://www.upopen.cn/upload/article/201509110855.jpg" alt="amd pic"></p><h3 id="-amd-">五、AMD。</h3><p>是&quot;Asynchronous Module Definition&quot;的缩写，意思就是&quot;异步模块定义&quot;，</p><p>以require.js为代表，官网<a href="http://requirejs.org/">http://requirejs.org/</a> ，其形式主要是</p><pre><code class="lang-js">    =============main.js===================
     &lt;script src=&quot;js/require.js&quot; data-main=&quot;js/Dialog&quot;&gt;&lt;/script&gt;

    ==============Dialog.js=======================
     define( [&#39;event&#39;, &#39;bootstrap&#39;, &#39;component&#39; ], function( event, bootstrap, component ){
          event.doSomthing();
          bootstrap.doSomthing();
           component.doSomthing();
          var Dialog = function(){
              ...
          }
          return {
              Dialog: Dialog
         }
     });
</code></pre><pre><code> 注：require接收两个参数，第一个参数是数组，含需加载的模块，第二个参数是回调，在模块加载成功后执行，且回调中的参数对应模块的加载顺序，这样主程序只需要加载一个JS文件，Dialog.js即可，其自会去加载event.js等文件，event.js再用同样的方式去加载base.js等，使用者无需考虑Dialog加载了多少引用，也无法担心其使用后会增减依赖。
</code></pre><h3 id="-cmd-">六、CMD：</h3><p>以sea.js为代表，官网 <a href="http://seajs.org/docs/，理念为需要时再执行，即依赖就近">http://seajs.org/docs/，理念为需要时再执行，即依赖就近</a></p><pre><code class="lang-js">     =============main.js===================
     &lt;script src=&quot;js/sea.js&quot;&gt;&lt;/script&gt;    
    &lt;script&gt;seajs.use(&quot;../static/hello/src/main&quot;)&lt;/script&gt;

    ==============Dialog.js=======================
    define( function( require, exports, module ){
        var event = require( &#39;event&#39; );
        event.doSomthing();
        var bootstrap = require( &#39;bootstrap&#39; );
        bootstrap.doSomthing();
        var component = require( &#39;component&#39; );
        component.doSomthing();
        var Dialog = function(){
             ...
        }                    
         exports.Dialog = Dialog;
    })
</code></pre><pre><code>注：模块引用本身就在回调里，并且在使用前引用即可，所以sea.js强调的是懒加载，这也就是AMD和CMD之间唯一的区别。实际上，require.js也支持CMD的写法，不过依赖前置是其官方推荐。我最初因为对国产和玉伯的支持敬佩，使用了seajs，近来为了弄清楚AMD，项目全部用了requirejs，虽然网上及seajs官方对两种逻列了一些分别，但使用下来，感觉并无优劣。
</code></pre><h3 id="-umd">七、UMD</h3><p>因服务端与客户端对模块化加载方式的不同，就会人想做一个兼容的模块UMD（Universal Module Definition），来解决跨平台的问题。但对于我们开发者来讲实则没有什么意义，也不深入了。</p><h3 id="-require-js-">八、require.js使用：</h3><pre><code class="lang-js">    require.config({
          baseUrl: &#39;module/js&#39;,     //配置path下的统一目的，以便path中不会分别配置
          path: {                              //配置module路径，以便引用时不用写全路径
              module1: &#39;module1&#39;,
              module2: &#39;module2&#39;,
              module3: &#39;http://www.site.com/module3&#39;     //若引用的是第三方，可以全部全路径
         },
          shim: {     //对不符合AMD规则的模块引用
              &#39;underscore&#39;: {
                   exports: &#39;_&#39;          //配置其原对外接口
              },
              &#39;backbone&#39;: {
                   deps: [&#39;underscore&#39;, &#39;jquery&#39;],     //配置其依赖项
                   exports: &#39;Backbone&#39;
             }
         }
     });

    define( [&#39;module1&#39;, &#39;module2&#39; ], function( module1, module2 ){
          module1.doSomthing();
          module2.doSomthing();
          function module3(){
              ...
         }
          return {
              module3: module3
         }
     })
</code></pre><h3 id="-require-js-">九、require.js时间戳</h3><p>require.js没有找到可配置时间戳，可修改require.js源文件中的load方法</p><pre><code class="lang-js">     load: function (id, url) {
        url += &#39;?&#39; + timestamp;     
        req.load(context, id, url);     
    },
</code></pre><p>新增 url += &#39;?&#39; + timestamp; 这一处语句，即为url添加timestamp，timestamp可以另外通过配置文件配置。我使用nodejs开发，在服务端的config文件配置 timestamp: &#39;2015091112&#39;，将其插入到客户端 ejs文件内</p><pre><code class="lang-js">     &lt;script&gt;
         var timestamp = &#39;&lt;%= timestamp %&gt;&#39;;
     &lt;/script&gt;
</code></pre><pre><code> 这样即可在 require.js 文件内调用。
</code></pre><h3 id="-require-js-">十、require.js合并：</h3><p>官网提供了r.js用于该模块化的打包 <a href="https://github.com/jrburke/r.js">https://github.com/jrburke/r.js</a> r.js是将通过require.js引用的模块化文件都合并到一个文件里，以减少文件加载数量。 项目参考 <a href="https://github.com/xiaolulu/mynodejs.git">https://github.com/xiaolulu/mynodejs.git</a> 首先下载r.js，可以到静态文件根目录，新建build.js用于配置r.js，常见的配置如下</p><pre><code class="lang-js">    build.js

    ({ 
        appDir: &#39;./&#39;, //项目根目录，给后面的baseUrl做参考;非必要项;默认为与r.js平级目录
        dir: &#39;./min&#39;, //压缩后的文件的输出目录 
        baseUrl: &#39;./&#39;, //模块相对目录，与后面的paths配置使用
        modules: [ 
                { name:&#39;login&#39;},
                { name: &#39;register&#39; },
                { name: &#39;center&#39; }
        ], 
        fileExclusionRegExp: /^(r|build)\.js|.*\.scss$/, //过滤文件不压缩
        optimizeCss: &#39;standard&#39;, //css的标准方式
        optimize: &#39;uglify&#39;, //设置是否压缩;uglify(压缩格式)|none(只合并不压缩)
        removeCombined: true, //设置移除压缩后的文件
        paths: { //设置模块别名，方便引用，压缩后require.js引用的模块路径就在这里定义的，不是require.config里的
                md5: &#39;core/js/md5&#39;,
                validate: &#39;widget/validate/validate&#39;,
                all: &#39;public/js/all&#39;,
                login: &#39;module/issue/login/login&#39;,
                register: &#39;module/issue/register/register&#39;,
                center: &#39;module/user/center/center&#39;
        }
    })
</code></pre><p>shell执行 node r.js -o build.js</p><h4 id="-almond-">十一、almond:</h4><p>合并后所有原通过模块化加载的文件都已经在一个文件里了，已经不需要require.js的大部分功能，但因合并后代码里还是有require / define的函数定义，这里命令解析还是要有的，所以就有了almond.js（约15KB），其保留了require.js（约80KB）的子集，但不支持模块化加载，即对已经合并后的模块解析可以使用，减少代码量。</p><p>不过，其理念是好的，但实现方案还待改进，其执行后就会almond.js与前面合并后过的业务JS合并成一个文件，直接用 src来引用，意味着每个页面都需要的 almond.js将无法缓存，所以当业务JS超过五个时，这个方案将没有意义，有兴趣可以自行到git上学习，这里不在讲述<a href="https://github.com/jrburke/almond">https://github.com/jrburke/almond</a></p><h4 id="-q-435485569">全栈工程新Q群：435485569</h4><h4 id="-http-www-upopen-cn-">相关文件可参考 <a href="http://www.upopen.cn">http://www.upopen.cn</a></h4></div></section><div class="comments" name="comments" id="comments"><div class="commentWrap" id="commentWrap"></div><form class="commentForm" id="commentForm"><input type="text" placeholder="you name" id="commentUser" maxlength="30" class="commentUser"><br><textarea class="commentContent" id="commentContent" rows="6" maxlength="1000" placeholder="your comment for this blog within 1000 words"></textarea><br><button type="submit" id="commentBtn" class="btn">SAVE COMMENT</button><br><br></form></div></div> <% include ../../common/slide.ejs %> <% include ../../common/footer.ejs %>