<% include ../../common/header.ejs %> <div class="main" id="blogBox"><section><div class="info clearfix"><span class="title">sass</span> <a class="type" href="/blog/list?kind=other">other</a> <img class="head" src="/public/imgs/head.png" width="42"></div><div class="tool"><!--span class="toolItem view">Views: 0</span>
			<span class="toolItem talk">Comments: 0</span--> <span class="toolItem date">Date: 2016-04-28</span></div><div class="content clearfix markdown"><h3 id="-">一、介绍</h3><p><a href="http://sass-lang.com/">sass官网</a></p><p>sass文件有两种后缀名 .sass / .scss，差异在于前者编写时不需要加 <em>{}</em> 和 <em>:</em>，而后者在这一点上和css相同，本文介绍时都使用后者。</p><pre><code class="lang-css">//.sass
body
  background:#fff;
p
 color: #f00

//.scss
background{
 background:#fff;
}
p{
  color:#f00;
}
</code></pre><h3 id="-">二、安装</h3><p>sass基于ruby，需要先安装ruby，以mac为例，因为mac已经安装了ruby，可以直接调用gem</p><pre><code class="lang-js">//安装
gem install sass
//安装有时会失败，gem的数据源在国外，或许是会网络总是导致失败，和nodejs npm 类似，可以修改数据源
//移除原source
gem sources --remove https://rubygems.org/
//添加taobao镜像source
gem sources -a https://ruby.taobao.org/
//查看修改后的source
gem sources -l
//查看安装版本，以确认是否安装成功
sass -v
</code></pre><p>其它相关命令还有</p><pre><code class="lang-js">//更新
gem update sass
//查看帮助
sass -h
</code></pre><h3 id="-">三、编译</h3><p>写好scss文件后，需要通过前面安装好的sass将其编译成css</p><p>先简单创建一个scss文件，定义目录如下</p><pre><code>* demo/
  + scss/
    - style.scss
  + css/
</code></pre><p>scss/style.scss，插入如下代码</p><pre><code class="lang-js">//定义变量
$bgColor: #foo;
body{
  background: $bgColor
}
</code></pre><p>执行编译</p><h4 id="1-">1、单文件编译</h4><pre><code>sass scss/style.scss css/style.css
</code></pre><p>编译后，css文件下生成style.css</p><pre><code class="lang-css">body {
  background: #f00; }
</code></pre><h4 id="2-">2、文件监听编译</h4><pre><code>sass --watch scss/style.scss:css/style.css
</code></pre><h4 id="3-">3、监听文件夹</h4><pre><code>sass --watch scss:css
</code></pre><h4 id="4-css-sass-">4、css也可以转换为sass，不过意义不大</h4><pre><code>sass-convert css/style.css scss/style.scss
</code></pre><h4 id="5-">5、其它一些配置项</h4><p>可以使用 --style，--sourcemap</p><pre><code>//开启sourcemap调度，生成.css.map文件
sass --watch scss:css --sourcemap
</code></pre><pre><code>sass --watch scss:css --style nested
</code></pre><p>--style 可以跟四种值 expanded[展开] / nested[嵌套] / compact[紧凑] / compressed[压缩]</p><p>实际开发过程中需要对scss文件保存即编译成css，可以使用sass --watch，也可以使用ide插件，我开发时使用gulp，所以会将sass集成到gulp，执行gulp watch，可参见 <a href="http://www.upopen.cn">gulp使用</a></p><h3 id="-">四、语法</h3><h4 id="1-">1、导入</h4><p>sass可以通过@import导入<em>.css和</em>.scss，其中.css是一样的，但对.scss的引入略有不同</p><ul><li>可以省略后缀名</li><li>被引入的文件名，可以下划线命令名 <em>_name</em> 形式，但引入时可忽略_。这样的命名方式，用于区分基础文件</li><li>被引入的.scss文件会合并到当前的.scss文件</li></ul><p>定义_color.scss</p><pre><code class="lang-css">$bgColor: #f0f;
</code></pre><p>定义style.scss</p><pre><code class="lang-css">@import &#39;reset.css&#39;
@import &#39;color&#39;
body{
  background: $bgColor;
}
</code></pre><h4 id="2-">2、注释</h4><p>sass的注释同js有两种，</p><pre><code class="lang-css">/**
* 多行注释
* 这样的注释编译到css里会被保留
*/

//这里是单行注释，被编译到css里不会被输出，因为css不支持这样的注释
</code></pre><h4 id="3-">3、变量</h4><h5 id="a-sass-">a、变量是sass中非常有用的一项，以$开头</h5><pre><code class="lang-css">//sass
$color: #ff0;
body{
  color: $color;
}

//=&gt;css
body{
  color: #ff0;
}
</code></pre><h5 id="b-variablies-">b、但对于作为属性的变量需要以#{$variablies}形式</h5><pre><code class="lang-css">$borderDir: top;
$borderStyle: solid;
.header{
 border-#{$borderDir}: 1px $borderStyle #f00; 
}
</code></pre><h5 id="c-">c、作为特殊值时也是</h5><pre><code class="lang-css">$fontSize: 12px;
$fontLineHeight: 2;
.header{
 font: #{$fontSize}/#{fontLineHeight}; 
}
</code></pre><h5 id="d-">d、多值变量</h5><h4 id="4-">4、嵌套</h4><p>有两种嵌套选择器嵌套、属性嵌套来实现继承。</p><h5 id="a-">a、选择器嵌套</h5><ol><li>是指一个选择器中嵌套另一个选择器，以使结构清晰，可用 <em>&amp;</em> 表示父选择器</li><li>属性嵌套，用于background / border这样属性</li><li>@at-root可跳出选择器嵌套</li></ol><pre><code class="lang-css">//sass，层级嵌套，结构清晰
header{
  height: 100px;
  font: #{$fontSize}/#{$fontLineHeight};
  background: $bgWhiteColor;
  border:{
    style: solid;
    width: 0;
    bottom: {
      width: 2px;
      color: #0ff;
    }
  }
  background:{
      color: $bgWhiteColor;
  }
  .mininav{
    height: 60px;
    margin: 20px;
    float: right;

    a{
      font-size: $fontSize;
      color: $fontColor;
      //&amp; 返回父选择器，相当于a:hover        
      &amp;:hover{
        color: $fontHoverColor;
      }
      //@at-root 跳出所有选择器，相当于在与header平级定义了section
      @at-root section{
          background: #ff0;
      }
    }
  }
}

//=&gt;css
header {
  height: 100px;
  font: 14px/2em;
  background: #fff;
  border-style: solid;
  border-width: 0;
  border-bottom-width: 2px;
  border-bottom-color: #0ff;
  background-color: #fff;
}
header .mininav {
  height: 60px;
  margin: 20px;
  float: right;
}
header .mininav a {
  font-size: 14px;
  color: #333;
}
header .mininav a:hover {
  color: #f00;
}
section {
  background: #ff0;
}
</code></pre><h4 id="4-">4、混合</h4><p>混合类似于js里的函数定义，可以使用函数，使用@mixin声明，通过@include调用</p><pre><code class="lang-css">//定义不带参数的 @mixin
@mixin opacity{
    opacity: .7;
    filter: alpha(opacity=70);
}

//定义带参数的 @mixin
@mixin opacityArg($opacity:50){ //默认值
    opacity: $opacity / 100;
    filter: alpha(opacity=$opacity);
}
//定义带多参的 @mixin
@mixin wrapper( $wbgColor: #000, $width: 100px, $height: 100px ){
    width: $width;
    height: $height;
    background: $wbgColor;
}

//定义多组值
@mixin shadow( $shadow... ){
    -webkit-box-shadow: $shadow;
    box-shadow: $shadow;
}

.box{
    @include opacity;
    @include wrapper;
}

.box1{
    @include opacityArg;
    @include wrapper(#f00);
}

.box2{
    @include opacityArg( 80 );
    @include wrapper($width: 200px);
    @include shadow(0 2px 2px #ff02ff, 0 3px 3px #ff02ff, 0 4px 4px #ff02ff);
}

//=&gt;css
.box {
  opacity: .7;
  filter: alpha(opacity=70);
  width: 100px;
  height: 100px;
  background: #000;
}

.box1 {
  opacity: 0.5;
  filter: alpha(opacity=50);
  width: 100px;
  height: 100px;
  background: #f00;
}

.box2 {
  opacity: 0.8;
  filter: alpha(opacity=80);
  width: 200px;
  height: 100px;
  background: #000;
  -webkit-box-shadow: 0 2px 2px #ff02ff, 0 3px 3px #ff02ff, 0 4px 4px #ff02ff;
  box-shadow: 0 2px 2px #ff02ff, 0 3px 3px #ff02ff, 0 4px 4px #ff02ff;
}
</code></pre><h4 id="5-">5、继承</h4><p>brother @extend person，让一个选择器brother继承另一个选择器person的样式。</p><pre><code class="lang-css">.person{
    width: 100px;
    height: 100px;
    border: 10px solid #0f0;
}
//% 占位符，此类的定义，若未被引用，将不会被解析，以解析资源。
%clearfix{
    clear: both;
}
%display{
    display: inline-block;
}
//对常规样式 及 占位符资源的引用
.brother{
    @extend .person;
    @extend %clearfix;
    background: #f00;
}

//=&gt;css
.person, .brother {
  width: 100px;
  height: 100px;
  border: 10px solid #0f0;
}

.brother {
  clear: both;
}

.brother {
  background: #f00;
}
</code></pre><h4 id="6-">6、函数</h4><h4 id="7-">7、运算</h4><h4 id="8-if-">8、if判断</h4><h4 id="9-for-">9、for循环</h4><h3 id="-">五、调试</h3></div></section><div class="comments" name="comments" id="comments"><div class="commentWrap" id="commentWrap"></div><form class="commentForm" id="commentForm"><input type="text" placeholder="you name" id="commentUser" maxlength="30" class="commentUser"><br><textarea class="commentContent" id="commentContent" rows="6" maxlength="1000" placeholder="your comment for this blog within 1000 words"></textarea><br><button type="submit" id="commentBtn" class="btn">SAVE COMMENT</button><br><br></form></div></div> <% include ../../common/slide.ejs %> <% include ../../common/footer.ejs %>