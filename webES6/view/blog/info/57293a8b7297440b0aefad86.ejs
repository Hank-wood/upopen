<% include ../../common/header.ejs %> <div class="main" id="blogBox"><section><div class="info clearfix"><span class="title">GIT的基础命令</span> <a class="type" href="/blog/list?kind=nodejs">nodejs</a> <img class="head" src="/public/imgs/head.png" width="42"></div><div class="tool"><!--span class="toolItem view">Views: 0</span>
			<span class="toolItem talk">Comments: 0</span--> <span class="toolItem date">Date: 2016-05-03</span></div><div class="content clearfix markdown"><p>GIT是目前最先进的分布式版本控制系统 分布式版本控制：记录项目文件任何改动，方便恢复至任一版本，方便多人协作</p><p>官网：<a href="http://git-scm.com/">http://git-scm.com/</a></p><h3 id="-svn-">一、与SVN比较：</h3><ol><li><p>为了协作开发都需要有中央服务器，但其更侧重于分布式。本地获取代码后有了完整的代码库，可以做拉分支、提交等操作，即使没有网络也可以做除分享外的任何功能。有疑问说，不协作还能做什么？比如我们断网情况下改了十个问题，分别commit十个版本是合理的，有网络时再一次把十个版本做个提交push origin master，仍然记录的是十个版本。SVN无网络则无法commit，或建分支。</p></li><li><p>强大的分支功能</p></li><li><p>其它的就要使用的过程中慢慢体会</p></li></ol><p>所有版本库文件只能记录文本文件的改动，二进制文件是无法记录改变内容的如图片/视频，word也是二进制文件。</p><p>用window的记事本编码也是有问题的，其在文本头做了改动，会导致乱码，建议用notepad++等专业编码器。</p><h3 id="-">二、安装：</h3><p>1、sudo apt-get install git //安装成功后，执行git 查看所有命令 初始化关联：</p><p>git init //生成git可以管理的仓库，该目录下会多一个隐藏的 .git目录，即用来跟踪管理版本库。</p><p>git remote add origin <a href="https://github.com/xiaolulu/upopen.git">https://github.com/xiaolulu/upopen.git</a> //关联远程库</p><p>另外，在git上已经有了项目，直接clone，使用</p><p>git clone git@github.com/xiaolulu/demo.git //拷贝远程库到本地，也可以用同上的add的https协议来关联，git默认是ssh协议，好处就是push时不用输密码，且速度更快</p><h3 id="-">三、操作： 可视化管理工具</h3><pre><code class="lang-javascript">    shell执行 gitk 
    git add readme          //将文件readme add到缓存区 git add * 添加所有
    git commit -m &quot;this is a test commit&quot;          //将文件提交到 HEAD，保存一次快照，-m 注释
    git push -u origin master          //将文件推到远端仓库，第一次推时加 -u 参数，将本地与远程关联，以后再推时不需要加 -u 
    另外还会用到
    git status     //查看本地修改，显示哪些文件修改
    git diff modify.txt     //会具体显示modify.txt修改了哪些内容
    git log          //查看提交日志  git log --pretty=oneline     格式化查看
    git log --pretty=oneline --abbrev-commit
    git reset --head HEAD^ //回退上一版，HEAD^^ 前两版，HEAD～100，前100

    git reset --head ******      //回退 或 向前，版本号可以通过前面的log查看
    git reflog          //查看所有操作日志，log只能看回退的，向后的看不到，可以通过该命令查看
    git checkout -- test.txt     //从缓存区恢复覆盖本地工作文件test.txt
    git reset HEAD test.txt     //从HEAD区恢复覆盖缓存区工作文件

    git rm test.txt                    //从工作区及缓存 git 删除，再git commit提交
</code></pre><p>2、生成 ssh-key</p><p>ssh-keygen -t rsa -C &quot;jiangxiao2000@126.com&quot;</p><p>3、配置全局</p><pre><code class="lang-javascript">git config --global user.name &quot;xiaolulu&quot;
git config --global user.email &quot;jiangxiao.2000@163.com&quot;
git config --global color.ui true    
``

4、分支：

```javascript
    创建并切换分支：    git branch -b dev    //当前分支创建新分支
    创建分支：     git branch dev
    查看分支：     git branch
    切换分支：     git checkout dev
    合并指定分支到当前分支：git merge dev
    删除分支：     git branch -d dev
    git log --graph     //查看分支合并图
</code></pre><p>5、忽略文件： 将需要忽略的文件名写入 .gitignore 文件，并提交至git。</p><pre><code class="lang-javascript">    # 注释
    #指定过滤某种类型的文件：
    *.zip
    #指定过滤某个文件：
    /mtk/do.c
    #跟踪某个文件夹
    !/plutommi/mmi
    #跟踪某类文件
    !*.c
    #跟踪某个指定文件
    !/plutommi/mmi/mmi_features.h
</code></pre><p>6、别名：</p><p>git config --global alias.ci commit //配置commit的别名为ci，去除global则只对当前库有效</p><p>配置是写在 .git/config里，</p><p>7、标签：</p><pre><code class="lang-javascript">    git tag     v1.0     //对当前的commit创建标签
    git tag                    //查看所有标签
    git show v1.0          //查看指定标签
    git tag v0.7     56958f     //给指定的commit id加标签
    git tag -a v0.8     -m &#39;这里是注释&#39; 6f12cf     //加描述
</code></pre><pre><code class="lang-javascript">    git push origin v0.1     //推送到远程
    git push origin --tags      //推送全部
    git tag -d v0.1     //删除tag
    git push origin :refs/tags/v1.0     //删除远程
</code></pre></div></section><div class="comments" name="comments" id="comments"><div class="commentWrap" id="commentWrap"></div><form class="commentForm" id="commentForm"><input type="text" placeholder="you name" id="commentUser" maxlength="30" class="commentUser"><br><textarea class="commentContent" id="commentContent" rows="6" maxlength="1000" placeholder="your comment for this blog within 1000 words"></textarea><br><button type="submit" id="commentBtn" class="btn">SAVE COMMENT</button><br><br></form></div></div> <% include ../../common/slide.ejs %> <% include ../../common/footer.ejs %>